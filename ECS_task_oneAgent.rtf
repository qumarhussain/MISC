{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Variables\
variable "cluster_name" \{\
  description = "ECS Cluster Name"\
  type        = string\
  default     = "your-ecs-cluster"\
\}\
\
variable "service_name" \{\
  description = "ECS Service Name"\
  type        = string\
  default     = "your-ecs-service"\
\}\
\
variable "oneagent_image" \{\
  description = "Dynatrace OneAgent Docker Image"\
  type        = string\
  default     = "docker.io/dynatrace/oneagent:latest"\
\}\
\
variable "dt_environment_id" \{\
  description = "Dynatrace Environment ID"\
  type        = string\
\}\
\
variable "dt_api_token" \{\
  description = "Dynatrace API Token"\
  type        = string\
\}\
\
# ECS Task Definition with OneAgent Sidecar\
resource "aws_ecs_task_definition" "task" \{\
  family                   = "ecs-task-with-oneagent"\
  requires_compatibilities = ["EC2"]\
  network_mode             = "bridge"\
  cpu                      = "256"  # Adjust based on your EC2 instance type\
  memory                   = "512"  # Adjust based on your EC2 instance type\
\
  container_definitions = jsonencode([\
    \{\
      name  = "application-container"\
      image = "your-application-image:latest"\
      essential = true\
      portMappings = [\
        \{\
          containerPort = 8080\
          hostPort      = 8080\
        \}\
      ]\
      logConfiguration = \{\
        logDriver = "awslogs"\
        options = \{\
          awslogs-region        = "us-east-1"\
          awslogs-group         = "/ecs/your-ecs-logs"\
          awslogs-stream-prefix = "ecs"\
        \}\
      \}\
    \},\
    \{\
      name  = "dynatrace-oneagent"\
      image = var.oneagent_image\
      essential = false\
      environment = [\
        \{\
          name  = "DT_CLUSTER_ID"\
          value = var.dt_environment_id\
        \},\
        \{\
          name  = "DT_TENANT_TOKEN"\
          value = var.dt_api_token\
        \}\
      ]\
      mountPoints = [\
        \{\
          sourceVolume  = "shared-dynatrace-volume"\
          containerPath = "/var/run/dynatrace"\
        \}\
      ]\
    \}\
  ])\
\
  volume \{\
    name = "shared-dynatrace-volume"\
    host_path = "/var/run/dynatrace"\
  \}\
\
  execution_role_arn = aws_iam_role.ecs_task_execution_role.arn\
  task_role_arn      = aws_iam_role.ecs_task_execution_role.arn\
\}\
\
# ECS Service\
resource "aws_ecs_service" "service" \{\
  name            = var.service_name\
  cluster         = var.cluster_name\
  task_definition = aws_ecs_task_definition.task.arn\
  desired_count   = 1\
  launch_type     = "EC2"\
\
  deployment_controller \{\
    type = "ECS"\
  \}\
\
  network_configuration \{\
    security_groups = ["sg-123456"]  # Replace with your security group\
    subnets         = ["subnet-abc123", "subnet-def456"]  # Replace with your subnets\
  \}\
\}\
\
# IAM Role for ECS Task Execution\
resource "aws_iam_role" "ecs_task_execution_role" \{\
  name = "ecs-task-execution-role"\
\
  assume_role_policy = jsonencode(\{\
    Version = "2012-10-17"\
    Statement = [\
      \{\
        Effect = "Allow"\
        Principal = \{\
          Service = "ecs-tasks.amazonaws.com"\
        \}\
        Action = "sts:AssumeRole"\
      \}\
    ]\
  \})\
\}\
\
resource "aws_iam_policy_attachment" "ecs_task_policy" \{\
  name       = "ecs-task-policy-attachment"\
  roles      = [aws_iam_role.ecs_task_execution_role.name]\
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"\
\}\
}